"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r=require("oracledb"),t=require("itee-validators"),o=e(require("path")),n=require("buffer"),s=e(require("fs")),i=require("stream");console.log("Itee.Database v8.0.2 - EsModule");
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class a extends i.Writable{constructor(e){super(e);const r=e.bufferSize||n.kStringMaxLength;this.memoryBuffer=Buffer.alloc(r),this.offset=0}_final(e){e()}_write(e,r,t){const o=Buffer.isBuffer(e)?e:new Buffer(e,r);for(let e=0,r=o.length;e<r;e++)this.memoryBuffer[this.offset]=o[e],this.offset++;t()}_writev(e,r){for(let r=0,t=e.length;r<t;r++)this.memoryBuffer=Buffer.concat([this.memoryBuffer,e[r]]);r()}_releaseMemory(){this.memoryBuffer=null}toArrayBuffer(){const e=this.memoryBuffer,r=new ArrayBuffer(e.length),t=new Uint8Array(r);for(let r=0;r<e.length;++r)t[r]=e[r];return this._releaseMemory(),r}toJSON(){return JSON.parse(this.toString())}toString(){const e=this.memoryBuffer.toString();return this._releaseMemory(),e}}class l{constructor(e={}){const r={dumpType:l.DumpType.ArrayBuffer,...e};this.dumpType=r.dumpType,this._isProcessing=!1,this._queue=[]}get dumpType(){return this._dumpType}set dumpType(e){if(t.isNull(e))throw new TypeError("Dump type cannot be null ! Expect a non empty string.");if(t.isUndefined(e))throw new TypeError("Dump type cannot be undefined ! Expect a non empty string.");this._dumpType=e}setDumpType(e){return this.dumpType=e,this}convert(e,r,t,o,n){e?(this._queue.push({file:e,parameters:r,onSuccess:t,onProgress:o,onError:n}),this._processQueue()):n("File cannot be null or empty, aborting file convertion !!!")}_processQueue(){if(0===this._queue.length||this._isProcessing)return;this._isProcessing=!0;const e=this,r=this._queue.shift(),o=r.file,n=r.parameters,s=r.onSuccess,i=r.onProgress,a=r.onError;if(t.isString(o))e._dumpFileInMemoryAs(e._dumpType,o,n,c,p,f);else{const r=o.data;switch(e._dumpType){case l.DumpType.ArrayBuffer:{const e=r.length,t=new ArrayBuffer(e),o=new Uint8Array(t);for(let t=0;t<e;++t)o[t]=r[t];c(t)}break;case l.DumpType.JSON:c(JSON.parse(r.toString()));break;case l.DumpType.String:c(r.toString());break;default:throw new RangeError(`Invalid switch parameter: ${e._dumpType}`)}}function c(r){e._convert(r,n,u,p,f)}function u(r){s(r),e._isProcessing=!1,e._processQueue()}function p(e){i(e)}function f(r){a(r),e._isProcessing=!1,e._processQueue()}}_dumpFileInMemoryAs(e,r,t,o,n,i){let c=!1;const u=s.createReadStream(r);u.on("error",e=>{c=!0,i(e)});const p=parseInt(t.fileSize),f=new a({bufferSize:p});f.on("error",e=>{c=!0,i(e)}),f.on("finish",()=>{if(!c){switch(e){case l.DumpType.ArrayBuffer:o(f.toArrayBuffer());break;case l.DumpType.String:o(f.toString());break;case l.DumpType.JSON:o(f.toJSON());break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}u.unpipe(),u.close(),f.end()}}),u.pipe(f)}_convert(){}}l.MAX_FILE_SIZE=67108864,l.DumpType=Object.freeze({ArrayBuffer:0,String:1,JSON:2});
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class c{static _registerRoutesTo(e,r,t,o,n){for(let s=0,i=n.length;s<i;s++){const i=n[s],a=new(o.get(i.controller.name))({driver:e,...i.controller.options}),l=t({mergeParams:!0});console.log(`\tAdd controller for base route: ${i.route}`),r.use(i.route,c._populateRouter(l,a,i.controller.can))}}static _populateRouter(e,r,t={}){for(let o in t){const n=t[o];console.log(`\t\tMap route ${n.over} on (${n.on}) to ${r.constructor.name}.${o} method.`),e[n.on](n.over,r[o].bind(r))}return e}constructor(e={}){const r={controllers:new Map,descriptors:[],...e};this.controllers=r.controllers,this.descriptors=r.descriptors,this.__dirname=void 0}get controllers(){return this._controllers}set controllers(e){if(t.isNull(e))throw new TypeError("Controllers cannot be null ! Expect a map of controller.");if(t.isUndefined(e))throw new TypeError("Controllers cannot be undefined ! Expect a map of controller.");if(!(e instanceof Map))throw new TypeError(`Controllers cannot be an instance of ${e.constructor.name} ! Expect a map of controller.`);this._controllers=e}get descriptors(){return this._descriptors}set descriptors(e){if(t.isNull(e))throw new TypeError("Descriptors cannot be null ! Expect an array of POJO.");if(t.isUndefined(e))throw new TypeError("Descriptors cannot be undefined ! Expect an array of POJO.");this._descriptors=e}addController(e){return this._controllers.set(e.name,e),this}addDescriptor(e){return this._descriptors.push(e),this}beforeRegisterRoutes(){}registerTo(e,r,t){this.beforeRegisterRoutes(e),c._registerRoutesTo(e,r,t,this._controllers,this._descriptors)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */exports.TOracleDatabase=
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class extends class{constructor(e={}){const r={driver:null,application:null,router:null,plugins:[],...e};this.driver=r.driver,this.application=r.application,this.router=r.router,this.plugins=r.plugins,this.init(),this._registerPlugins()}get plugins(){return this._plugins}set plugins(e){if(t.isNull(e))throw new TypeError("Plugins cannot be null ! Expect an array of TDatabasePlugin.");if(t.isUndefined(e))throw new TypeError("Plugins cannot be undefined ! Expect an array of TDatabasePlugin.");this._plugins=e}get router(){return this._router}set router(e){if(t.isNull(e))throw new TypeError("Router cannot be null ! Expect a Express Router.");if(t.isUndefined(e))throw new TypeError("Router cannot be undefined ! Expect a Express Router.");this._router=e}get application(){return this._application}set application(e){if(t.isNull(e))throw new TypeError("Application cannot be null ! Expect a Express Application.");if(t.isUndefined(e))throw new TypeError("Application cannot be undefined ! Expect a Express Application.");this._application=e}get driver(){return this._driver}set driver(e){if(t.isNull(e))throw new TypeError("Driver cannot be null ! Expect a database driver.");if(t.isUndefined(e))throw new TypeError("Driver cannot be undefined ! Expect a database driver.");this._driver=e}setPlugins(e){return this.plugins=e,this}setRouter(e){return this.router=e,this}setApplication(e){return this.application=e,this}setDriver(e){return this.driver=e,this}init(){}_registerPlugins(){for(let[e,r]of Object.entries(this._plugins))this._registerPackagePlugin(e,r)?console.log(`Use ${e} plugin from node_modules`):this._registerLocalPlugin(e,r)?console.log(`Use ${e} plugin from local folder`):console.error(`Unable to register the plugin ${e} the package or local folder doesn't seem to exist ! Skip it.`)}_registerPackagePlugin(e){let r=!1;try{const t=require(e);t instanceof c?(t.__dirname=o.dirname(require.resolve(e)),t.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||console.error(e)}return r}_registerLocalPlugin(e){let r=!1;try{const t=o.join(__dirname,"../../../","databases/plugins/",e,`${e}.js`),n=require(t);n instanceof c?(n.__dirname=o.dirname(require.resolve(t)),n.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){console.error(e)}return r}connect(){}close(){}on(){}}{constructor(e={}){super({...e,driver:r})}close(){}connect(){const e={user:"DbUser",password:"DbPassword",connectString:"localhost:1521/orcl"};!async function(r){let t;try{t=await this._driver.getConnection(e);const o=await t.execute("select * from employees where employee_id = :id",[r]);console.log(o.rows[0])}catch(e){console.log("Ouch!",e)}finally{t&&await t.close()}}(101)}on(){}_initDatabase(){super._initDatabase()}};
